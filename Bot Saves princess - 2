"""
In this version of "Bot saves princess", Princess Peach and bot's position are randomly set. Can you save the princess?

Task

Complete the function nextMove which takes in 4 parameters - an integer N, integers r and c indicating the row & column position of the bot and the character array grid - and outputs the next move the bot makes to rescue the princess.

Input Format

The first line of the input is N (<100), the size of the board (NxN). The second line of the input contains two space separated integers, which is the position of the bot.

Grid is indexed using Matrix Convention

The position of the princess is indicated by the character 'p' and the position of the bot is indicated by the character 'm' and each cell is denoted by '-' (ascii value: 45).

Output Format

Output only the next move you take to rescue the princess. Valid moves are LEFT, RIGHT, UP or DOWN

Sample Input

5
2 3
-----
-----
p--m-
-----
-----
Sample Output

LEFT
Resultant State

-----
-----
p-m--
-----
-----
Explanation

As you can see, bot is one step closer to the princess.

Scoring
Your score for every testcase would be (NxN minus number of moves made to rescue the princess)/10 where N is the size of the grid (5x5 in the sample testcase). Maximum score is 17.5
"""

# Enter your code here. Read input from STDIN. Print output to STDOUT

#The problem
#1-Find where the princess starts in the grid
#2-print the first move that brings Mario closer to the princess

def nextMove(n, m_row, m_col, grid):
    
        
    #Move mario towards princess
    #This is similar to the previous problem but instead of moving until completion, we only need to return the first step
    #If mario is below princess print up 
    if m_row<p_start[0]:
        return 'DOWN'

    
    #If mario is above princess print down 
    if m_row>p_start[0]:
        return 'UP'

    
    #If mario is left of princess print Right 
    if m_col<p_start[1]:
        return 'RIGHT'

    
    #If mario is right of princess print left 
    if m_col>p_start[1]:
        return 'LEFT'

        
n = int(input())
m_row,m_col= [int(i) for i in input().strip().split()]
grid = []  
for i in range(0, n): 
    grid.append(input().strip())
    
#we must subtract 1 for grid notation because it starts at zero
n=n-1
#This gives us a list of each row and column number.
num_row=range(0,n)
num_col=range(0,n)
    
#find princess
#With this nested for loop, we can test each grid coordinate to determine if the princess is located there
for x in num_row:
    for y in num_col:
        if grid[x][y]=='p':
            p_start=(x,y)

print(nextMove(n, m_row, m_col, grid))  
